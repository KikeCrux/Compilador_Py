
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BREAK CHAR COMMA DIVIDE DO ELSE EQ EQUALS FALSE FI FLOAT GE GT ID IF INT LBRACE LE LPAREN LT MAIN MINUS NE NOT NUMBERFLOAT NUMBERINT OR PLUS RBRACE READ RPAREN SEMICOLON THEN TIMES TRUE UNTIL WHILE WRITEprograma : MAIN LBRACE lista_decl lista_sent RBRACElista_decl : lista_decl decl\n                  | emptydecl : tipo lista_id SEMICOLONtipo : INT\n            | FLOAT\n            | BOOLlista_id : lista_id COMMA ID\n                | IDlista_sent : lista_sent sent\n                  | emptysent : sent_if\n            | sent_while\n            | sent_do\n            | sent_read\n            | sent_write\n            | bloque\n            | sent_assign\n            | BREAK SEMICOLONsent_if : IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI\n               | IF LPAREN exp_bool RPAREN THEN bloque FIsent_while : WHILE LPAREN exp_bool RPAREN bloquesent_do : DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLONsent_read : READ ID SEMICOLONsent_write : WRITE exp_bool SEMICOLONbloque : LBRACE lista_sent RBRACEsent_assign : ID EQUALS exp_bool SEMICOLONexp_bool : exp_bool OR comb\n                | combcomb : comb AND igualdad\n            | igualdadigualdad : igualdad EQ rel\n                | igualdad NE rel\n                | relrel : expr LT expr\n           | expr LE expr\n           | expr GT expr\n           | expr GE expr\n           | exprexpr : expr PLUS term\n            | expr MINUS term\n            | termterm : term TIMES unario\n            | term DIVIDE unario\n            | unariounario : NOT unario\n              | MINUS unario\n              | factorfactor : NUMBERINT\n              | NUMBERFLOAT\n              | ID\n              | LPAREN exp_bool RPAREN\n              | TRUE\n              | FALSEempty :'
    
_lr_action_items = {'MAIN':([0,],[2,]),'$end':([1,14,],[0,-1,]),'LBRACE':([2,3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,26,32,33,55,57,61,63,81,83,97,98,102,103,104,106,],[3,-55,-55,-3,13,-2,-11,-55,-10,-12,-13,-14,-15,-16,-17,-18,13,13,-19,-4,-26,-24,-25,13,-27,13,-22,13,-21,-23,-20,]),'INT':([3,4,5,7,55,],[-55,10,-3,-2,-4,]),'FLOAT':([3,4,5,7,55,],[-55,11,-3,-2,-4,]),'BOOL':([3,4,5,7,55,],[-55,12,-3,-2,-4,]),'RBRACE':([3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,32,33,55,57,61,63,83,98,103,104,106,],[-55,-55,-3,14,-2,-11,-55,-10,-12,-13,-14,-15,-16,-17,-18,57,-19,-4,-26,-24,-25,-27,-22,-21,-23,-20,]),'BREAK':([3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,32,33,55,57,61,63,83,98,103,104,106,],[-55,-55,-3,23,-2,-11,-55,-10,-12,-13,-14,-15,-16,-17,-18,23,-19,-4,-26,-24,-25,-27,-22,-21,-23,-20,]),'IF':([3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,32,33,55,57,61,63,83,98,103,104,106,],[-55,-55,-3,24,-2,-11,-55,-10,-12,-13,-14,-15,-16,-17,-18,24,-19,-4,-26,-24,-25,-27,-22,-21,-23,-20,]),'WHILE':([3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,32,33,55,57,61,63,83,98,103,104,106,],[-55,-55,-3,25,-2,-11,-55,-10,-12,-13,-14,-15,-16,-17,-18,25,-19,-4,-26,-24,-25,-27,-22,-21,-23,-20,]),'DO':([3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,32,33,55,57,61,63,83,98,103,104,106,],[-55,-55,-3,26,-2,-11,-55,-10,-12,-13,-14,-15,-16,-17,-18,26,-19,-4,-26,-24,-25,-27,-22,-21,-23,-20,]),'READ':([3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,32,33,55,57,61,63,83,98,103,104,106,],[-55,-55,-3,27,-2,-11,-55,-10,-12,-13,-14,-15,-16,-17,-18,27,-19,-4,-26,-24,-25,-27,-22,-21,-23,-20,]),'WRITE':([3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,32,33,55,57,61,63,83,98,103,104,106,],[-55,-55,-3,29,-2,-11,-55,-10,-12,-13,-14,-15,-16,-17,-18,29,-19,-4,-26,-24,-25,-27,-22,-21,-23,-20,]),'ID':([3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,27,29,32,33,34,35,38,45,47,52,55,56,57,61,63,64,65,66,67,68,69,70,71,72,73,74,75,82,83,98,103,104,106,],[-55,-55,-3,28,-2,-11,31,-5,-6,-7,-55,-10,-12,-13,-14,-15,-16,-17,-18,37,51,28,-19,51,51,51,51,51,51,-4,79,-26,-24,-25,51,51,51,51,51,51,51,51,51,51,51,51,51,-27,-22,-21,-23,-20,]),'SEMICOLON':([23,30,31,37,39,40,41,42,43,44,46,48,49,50,51,53,54,62,76,77,79,84,85,86,87,88,89,90,91,92,93,94,95,96,101,],[33,55,-9,61,63,-29,-31,-34,-39,-42,-45,-48,-49,-50,-51,-53,-54,83,-47,-46,-8,-28,-30,-32,-33,-35,-36,-37,-38,-40,-41,-43,-44,-52,104,]),'LPAREN':([24,25,29,34,35,38,45,47,52,60,64,65,66,67,68,69,70,71,72,73,74,75,82,],[34,35,52,52,52,52,52,52,52,82,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'EQUALS':([28,],[38,]),'NOT':([29,34,35,38,45,47,52,64,65,66,67,68,69,70,71,72,73,74,75,82,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'MINUS':([29,34,35,38,43,44,45,46,47,48,49,50,51,52,53,54,64,65,66,67,68,69,70,71,72,73,74,75,76,77,82,88,89,90,91,92,93,94,95,96,],[45,45,45,45,73,-42,45,-45,45,-48,-49,-50,-51,45,-53,-54,45,45,45,45,45,45,45,45,45,45,45,45,-47,-46,45,73,73,73,73,-40,-41,-43,-44,-52,]),'NUMBERINT':([29,34,35,38,45,47,52,64,65,66,67,68,69,70,71,72,73,74,75,82,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'NUMBERFLOAT':([29,34,35,38,45,47,52,64,65,66,67,68,69,70,71,72,73,74,75,82,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'TRUE':([29,34,35,38,45,47,52,64,65,66,67,68,69,70,71,72,73,74,75,82,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'FALSE':([29,34,35,38,45,47,52,64,65,66,67,68,69,70,71,72,73,74,75,82,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'COMMA':([30,31,79,],[56,-9,-8,]),'UNTIL':([36,57,],[60,-26,]),'OR':([39,40,41,42,43,44,46,48,49,50,51,53,54,58,59,62,76,77,78,84,85,86,87,88,89,90,91,92,93,94,95,96,99,],[64,-29,-31,-34,-39,-42,-45,-48,-49,-50,-51,-53,-54,64,64,64,-47,-46,64,-28,-30,-32,-33,-35,-36,-37,-38,-40,-41,-43,-44,-52,64,]),'RPAREN':([40,41,42,43,44,46,48,49,50,51,53,54,58,59,76,77,78,84,85,86,87,88,89,90,91,92,93,94,95,96,99,],[-29,-31,-34,-39,-42,-45,-48,-49,-50,-51,-53,-54,80,81,-47,-46,96,-28,-30,-32,-33,-35,-36,-37,-38,-40,-41,-43,-44,-52,101,]),'AND':([40,41,42,43,44,46,48,49,50,51,53,54,76,77,84,85,86,87,88,89,90,91,92,93,94,95,96,],[65,-31,-34,-39,-42,-45,-48,-49,-50,-51,-53,-54,-47,-46,65,-30,-32,-33,-35,-36,-37,-38,-40,-41,-43,-44,-52,]),'EQ':([41,42,43,44,46,48,49,50,51,53,54,76,77,85,86,87,88,89,90,91,92,93,94,95,96,],[66,-34,-39,-42,-45,-48,-49,-50,-51,-53,-54,-47,-46,66,-32,-33,-35,-36,-37,-38,-40,-41,-43,-44,-52,]),'NE':([41,42,43,44,46,48,49,50,51,53,54,76,77,85,86,87,88,89,90,91,92,93,94,95,96,],[67,-34,-39,-42,-45,-48,-49,-50,-51,-53,-54,-47,-46,67,-32,-33,-35,-36,-37,-38,-40,-41,-43,-44,-52,]),'LT':([43,44,46,48,49,50,51,53,54,76,77,92,93,94,95,96,],[68,-42,-45,-48,-49,-50,-51,-53,-54,-47,-46,-40,-41,-43,-44,-52,]),'LE':([43,44,46,48,49,50,51,53,54,76,77,92,93,94,95,96,],[69,-42,-45,-48,-49,-50,-51,-53,-54,-47,-46,-40,-41,-43,-44,-52,]),'GT':([43,44,46,48,49,50,51,53,54,76,77,92,93,94,95,96,],[70,-42,-45,-48,-49,-50,-51,-53,-54,-47,-46,-40,-41,-43,-44,-52,]),'GE':([43,44,46,48,49,50,51,53,54,76,77,92,93,94,95,96,],[71,-42,-45,-48,-49,-50,-51,-53,-54,-47,-46,-40,-41,-43,-44,-52,]),'PLUS':([43,44,46,48,49,50,51,53,54,76,77,88,89,90,91,92,93,94,95,96,],[72,-42,-45,-48,-49,-50,-51,-53,-54,-47,-46,72,72,72,72,-40,-41,-43,-44,-52,]),'TIMES':([44,46,48,49,50,51,53,54,76,77,92,93,94,95,96,],[74,-45,-48,-49,-50,-51,-53,-54,-47,-46,74,74,-43,-44,-52,]),'DIVIDE':([44,46,48,49,50,51,53,54,76,77,92,93,94,95,96,],[75,-45,-48,-49,-50,-51,-53,-54,-47,-46,75,75,-43,-44,-52,]),'ELSE':([57,100,],[-26,102,]),'FI':([57,100,105,],[-26,103,106,]),'THEN':([80,],[97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'lista_decl':([3,],[4,]),'empty':([3,4,13,],[5,8,8,]),'lista_sent':([4,13,],[6,32,]),'decl':([4,],[7,]),'tipo':([4,],[9,]),'sent':([6,32,],[15,15,]),'sent_if':([6,32,],[16,16,]),'sent_while':([6,32,],[17,17,]),'sent_do':([6,32,],[18,18,]),'sent_read':([6,32,],[19,19,]),'sent_write':([6,32,],[20,20,]),'bloque':([6,26,32,81,97,102,],[21,36,21,98,100,105,]),'sent_assign':([6,32,],[22,22,]),'lista_id':([9,],[30,]),'exp_bool':([29,34,35,38,52,82,],[39,58,59,62,78,99,]),'comb':([29,34,35,38,52,64,82,],[40,40,40,40,40,84,40,]),'igualdad':([29,34,35,38,52,64,65,82,],[41,41,41,41,41,41,85,41,]),'rel':([29,34,35,38,52,64,65,66,67,82,],[42,42,42,42,42,42,42,86,87,42,]),'expr':([29,34,35,38,52,64,65,66,67,68,69,70,71,82,],[43,43,43,43,43,43,43,43,43,88,89,90,91,43,]),'term':([29,34,35,38,52,64,65,66,67,68,69,70,71,72,73,82,],[44,44,44,44,44,44,44,44,44,44,44,44,44,92,93,44,]),'unario':([29,34,35,38,45,47,52,64,65,66,67,68,69,70,71,72,73,74,75,82,],[46,46,46,46,76,77,46,46,46,46,46,46,46,46,46,46,46,94,95,46,]),'factor':([29,34,35,38,45,47,52,64,65,66,67,68,69,70,71,72,73,74,75,82,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> MAIN LBRACE lista_decl lista_sent RBRACE','programa',5,'p_programa','analizador_sintactico.py',8),
  ('lista_decl -> lista_decl decl','lista_decl',2,'p_lista_decl','analizador_sintactico.py',12),
  ('lista_decl -> empty','lista_decl',1,'p_lista_decl','analizador_sintactico.py',13),
  ('decl -> tipo lista_id SEMICOLON','decl',3,'p_decl','analizador_sintactico.py',20),
  ('tipo -> INT','tipo',1,'p_tipo','analizador_sintactico.py',24),
  ('tipo -> FLOAT','tipo',1,'p_tipo','analizador_sintactico.py',25),
  ('tipo -> BOOL','tipo',1,'p_tipo','analizador_sintactico.py',26),
  ('lista_id -> lista_id COMMA ID','lista_id',3,'p_lista_id','analizador_sintactico.py',30),
  ('lista_id -> ID','lista_id',1,'p_lista_id','analizador_sintactico.py',31),
  ('lista_sent -> lista_sent sent','lista_sent',2,'p_lista_sent','analizador_sintactico.py',38),
  ('lista_sent -> empty','lista_sent',1,'p_lista_sent','analizador_sintactico.py',39),
  ('sent -> sent_if','sent',1,'p_sent','analizador_sintactico.py',46),
  ('sent -> sent_while','sent',1,'p_sent','analizador_sintactico.py',47),
  ('sent -> sent_do','sent',1,'p_sent','analizador_sintactico.py',48),
  ('sent -> sent_read','sent',1,'p_sent','analizador_sintactico.py',49),
  ('sent -> sent_write','sent',1,'p_sent','analizador_sintactico.py',50),
  ('sent -> bloque','sent',1,'p_sent','analizador_sintactico.py',51),
  ('sent -> sent_assign','sent',1,'p_sent','analizador_sintactico.py',52),
  ('sent -> BREAK SEMICOLON','sent',2,'p_sent','analizador_sintactico.py',53),
  ('sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI','sent_if',9,'p_sent_if','analizador_sintactico.py',60),
  ('sent_if -> IF LPAREN exp_bool RPAREN THEN bloque FI','sent_if',7,'p_sent_if','analizador_sintactico.py',61),
  ('sent_while -> WHILE LPAREN exp_bool RPAREN bloque','sent_while',5,'p_sent_while','analizador_sintactico.py',68),
  ('sent_do -> DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON','sent_do',7,'p_sent_do','analizador_sintactico.py',72),
  ('sent_read -> READ ID SEMICOLON','sent_read',3,'p_sent_read','analizador_sintactico.py',76),
  ('sent_write -> WRITE exp_bool SEMICOLON','sent_write',3,'p_sent_write','analizador_sintactico.py',80),
  ('bloque -> LBRACE lista_sent RBRACE','bloque',3,'p_bloque','analizador_sintactico.py',84),
  ('sent_assign -> ID EQUALS exp_bool SEMICOLON','sent_assign',4,'p_sent_assign','analizador_sintactico.py',88),
  ('exp_bool -> exp_bool OR comb','exp_bool',3,'p_exp_bool','analizador_sintactico.py',92),
  ('exp_bool -> comb','exp_bool',1,'p_exp_bool','analizador_sintactico.py',93),
  ('comb -> comb AND igualdad','comb',3,'p_comb','analizador_sintactico.py',100),
  ('comb -> igualdad','comb',1,'p_comb','analizador_sintactico.py',101),
  ('igualdad -> igualdad EQ rel','igualdad',3,'p_igualdad','analizador_sintactico.py',108),
  ('igualdad -> igualdad NE rel','igualdad',3,'p_igualdad','analizador_sintactico.py',109),
  ('igualdad -> rel','igualdad',1,'p_igualdad','analizador_sintactico.py',110),
  ('rel -> expr LT expr','rel',3,'p_rel','analizador_sintactico.py',117),
  ('rel -> expr LE expr','rel',3,'p_rel','analizador_sintactico.py',118),
  ('rel -> expr GT expr','rel',3,'p_rel','analizador_sintactico.py',119),
  ('rel -> expr GE expr','rel',3,'p_rel','analizador_sintactico.py',120),
  ('rel -> expr','rel',1,'p_rel','analizador_sintactico.py',121),
  ('expr -> expr PLUS term','expr',3,'p_expr','analizador_sintactico.py',135),
  ('expr -> expr MINUS term','expr',3,'p_expr','analizador_sintactico.py',136),
  ('expr -> term','expr',1,'p_expr','analizador_sintactico.py',137),
  ('term -> term TIMES unario','term',3,'p_term','analizador_sintactico.py',144),
  ('term -> term DIVIDE unario','term',3,'p_term','analizador_sintactico.py',145),
  ('term -> unario','term',1,'p_term','analizador_sintactico.py',146),
  ('unario -> NOT unario','unario',2,'p_unario','analizador_sintactico.py',153),
  ('unario -> MINUS unario','unario',2,'p_unario','analizador_sintactico.py',154),
  ('unario -> factor','unario',1,'p_unario','analizador_sintactico.py',155),
  ('factor -> NUMBERINT','factor',1,'p_factor','analizador_sintactico.py',162),
  ('factor -> NUMBERFLOAT','factor',1,'p_factor','analizador_sintactico.py',163),
  ('factor -> ID','factor',1,'p_factor','analizador_sintactico.py',164),
  ('factor -> LPAREN exp_bool RPAREN','factor',3,'p_factor','analizador_sintactico.py',165),
  ('factor -> TRUE','factor',1,'p_factor','analizador_sintactico.py',166),
  ('factor -> FALSE','factor',1,'p_factor','analizador_sintactico.py',167),
  ('empty -> <empty>','empty',0,'p_empty','analizador_sintactico.py',174),
]
