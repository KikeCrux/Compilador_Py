Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHAR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> MAIN LBRACE lista_decl lista_sent RBRACE
Rule 2     lista_decl -> lista_decl decl
Rule 3     lista_decl -> empty
Rule 4     decl -> tipo lista_id SEMICOLON
Rule 5     tipo -> INT
Rule 6     tipo -> FLOAT
Rule 7     tipo -> BOOL
Rule 8     lista_id -> lista_id COMMA ID
Rule 9     lista_id -> ID
Rule 10    lista_sent -> lista_sent sent
Rule 11    lista_sent -> empty
Rule 12    sent -> sent_if
Rule 13    sent -> sent_while
Rule 14    sent -> sent_do
Rule 15    sent -> sent_read
Rule 16    sent -> sent_write
Rule 17    sent -> bloque
Rule 18    sent -> sent_assign
Rule 19    sent -> BREAK SEMICOLON
Rule 20    sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI
Rule 21    sent_if -> IF LPAREN exp_bool RPAREN THEN bloque FI
Rule 22    sent_while -> WHILE LPAREN exp_bool RPAREN bloque
Rule 23    sent_do -> DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON
Rule 24    sent_read -> READ ID SEMICOLON
Rule 25    sent_write -> WRITE exp_bool SEMICOLON
Rule 26    bloque -> LBRACE lista_sent RBRACE
Rule 27    sent_assign -> ID EQUALS exp_bool SEMICOLON
Rule 28    exp_bool -> exp_bool OR comb
Rule 29    exp_bool -> comb
Rule 30    comb -> comb AND igualdad
Rule 31    comb -> igualdad
Rule 32    igualdad -> igualdad EQ rel
Rule 33    igualdad -> igualdad NE rel
Rule 34    igualdad -> rel
Rule 35    rel -> expr LT expr
Rule 36    rel -> expr LE expr
Rule 37    rel -> expr GT expr
Rule 38    rel -> expr GE expr
Rule 39    rel -> expr
Rule 40    expr -> expr PLUS term
Rule 41    expr -> expr MINUS term
Rule 42    expr -> term
Rule 43    term -> term TIMES unario
Rule 44    term -> term DIVIDE unario
Rule 45    term -> unario
Rule 46    unario -> NOT unario
Rule 47    unario -> MINUS unario
Rule 48    unario -> factor
Rule 49    factor -> NUMBERINT
Rule 50    factor -> NUMBERFLOAT
Rule 51    factor -> ID
Rule 52    factor -> LPAREN exp_bool RPAREN
Rule 53    factor -> TRUE
Rule 54    factor -> FALSE
Rule 55    empty -> <empty>

Terminals, with rules where they appear

AND                  : 30
BOOL                 : 7
BREAK                : 19
CHAR                 : 
COMMA                : 8
DIVIDE               : 44
DO                   : 23
ELSE                 : 20
EQ                   : 32
EQUALS               : 27
FALSE                : 54
FI                   : 20 21
FLOAT                : 6
GE                   : 38
GT                   : 37
ID                   : 8 9 24 27 51
IF                   : 20 21
INT                  : 5
LBRACE               : 1 26
LE                   : 36
LPAREN               : 20 21 22 23 52
LT                   : 35
MAIN                 : 1
MINUS                : 41 47
NE                   : 33
NOT                  : 46
NUMBERFLOAT          : 50
NUMBERINT            : 49
OR                   : 28
PLUS                 : 40
RBRACE               : 1 26
READ                 : 24
RPAREN               : 20 21 22 23 52
SEMICOLON            : 4 19 23 24 25 27
THEN                 : 20 21
TIMES                : 43
TRUE                 : 53
UNTIL                : 23
WHILE                : 22
WRITE                : 25
error                : 

Nonterminals, with rules where they appear

bloque               : 17 20 20 21 22 23
comb                 : 28 29 30
decl                 : 2
empty                : 3 11
exp_bool             : 20 21 22 23 25 27 28 52
expr                 : 35 35 36 36 37 37 38 38 39 40 41
factor               : 48
igualdad             : 30 31 32 33
lista_decl           : 1 2
lista_id             : 4 8
lista_sent           : 1 10 26
programa             : 0
rel                  : 32 33 34
sent                 : 10
sent_assign          : 18
sent_do              : 14
sent_if              : 12
sent_read            : 15
sent_while           : 13
sent_write           : 16
term                 : 40 41 42 43 44
tipo                 : 4
unario               : 43 44 45 46 47

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . MAIN LBRACE lista_decl lista_sent RBRACE

    MAIN            shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> MAIN . LBRACE lista_decl lista_sent RBRACE

    LBRACE          shift and go to state 3


state 3

    (1) programa -> MAIN LBRACE . lista_decl lista_sent RBRACE
    (2) lista_decl -> . lista_decl decl
    (3) lista_decl -> . empty
    (55) empty -> .

    INT             reduce using rule 55 (empty -> .)
    FLOAT           reduce using rule 55 (empty -> .)
    BOOL            reduce using rule 55 (empty -> .)
    RBRACE          reduce using rule 55 (empty -> .)
    BREAK           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    WHILE           reduce using rule 55 (empty -> .)
    DO              reduce using rule 55 (empty -> .)
    READ            reduce using rule 55 (empty -> .)
    WRITE           reduce using rule 55 (empty -> .)
    LBRACE          reduce using rule 55 (empty -> .)
    ID              reduce using rule 55 (empty -> .)

    lista_decl                     shift and go to state 4
    empty                          shift and go to state 5

state 4

    (1) programa -> MAIN LBRACE lista_decl . lista_sent RBRACE
    (2) lista_decl -> lista_decl . decl
    (10) lista_sent -> . lista_sent sent
    (11) lista_sent -> . empty
    (4) decl -> . tipo lista_id SEMICOLON
    (55) empty -> .
    (5) tipo -> . INT
    (6) tipo -> . FLOAT
    (7) tipo -> . BOOL

    RBRACE          reduce using rule 55 (empty -> .)
    BREAK           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    WHILE           reduce using rule 55 (empty -> .)
    DO              reduce using rule 55 (empty -> .)
    READ            reduce using rule 55 (empty -> .)
    WRITE           reduce using rule 55 (empty -> .)
    LBRACE          reduce using rule 55 (empty -> .)
    ID              reduce using rule 55 (empty -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    BOOL            shift and go to state 12

    lista_sent                     shift and go to state 6
    decl                           shift and go to state 7
    empty                          shift and go to state 8
    tipo                           shift and go to state 9

state 5

    (3) lista_decl -> empty .

    INT             reduce using rule 3 (lista_decl -> empty .)
    FLOAT           reduce using rule 3 (lista_decl -> empty .)
    BOOL            reduce using rule 3 (lista_decl -> empty .)
    RBRACE          reduce using rule 3 (lista_decl -> empty .)
    BREAK           reduce using rule 3 (lista_decl -> empty .)
    IF              reduce using rule 3 (lista_decl -> empty .)
    WHILE           reduce using rule 3 (lista_decl -> empty .)
    DO              reduce using rule 3 (lista_decl -> empty .)
    READ            reduce using rule 3 (lista_decl -> empty .)
    WRITE           reduce using rule 3 (lista_decl -> empty .)
    LBRACE          reduce using rule 3 (lista_decl -> empty .)
    ID              reduce using rule 3 (lista_decl -> empty .)


state 6

    (1) programa -> MAIN LBRACE lista_decl lista_sent . RBRACE
    (10) lista_sent -> lista_sent . sent
    (12) sent -> . sent_if
    (13) sent -> . sent_while
    (14) sent -> . sent_do
    (15) sent -> . sent_read
    (16) sent -> . sent_write
    (17) sent -> . bloque
    (18) sent -> . sent_assign
    (19) sent -> . BREAK SEMICOLON
    (20) sent_if -> . IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI
    (21) sent_if -> . IF LPAREN exp_bool RPAREN THEN bloque FI
    (22) sent_while -> . WHILE LPAREN exp_bool RPAREN bloque
    (23) sent_do -> . DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON
    (24) sent_read -> . READ ID SEMICOLON
    (25) sent_write -> . WRITE exp_bool SEMICOLON
    (26) bloque -> . LBRACE lista_sent RBRACE
    (27) sent_assign -> . ID EQUALS exp_bool SEMICOLON

    RBRACE          shift and go to state 14
    BREAK           shift and go to state 23
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    READ            shift and go to state 27
    WRITE           shift and go to state 29
    LBRACE          shift and go to state 13
    ID              shift and go to state 28

    sent                           shift and go to state 15
    sent_if                        shift and go to state 16
    sent_while                     shift and go to state 17
    sent_do                        shift and go to state 18
    sent_read                      shift and go to state 19
    sent_write                     shift and go to state 20
    bloque                         shift and go to state 21
    sent_assign                    shift and go to state 22

state 7

    (2) lista_decl -> lista_decl decl .

    INT             reduce using rule 2 (lista_decl -> lista_decl decl .)
    FLOAT           reduce using rule 2 (lista_decl -> lista_decl decl .)
    BOOL            reduce using rule 2 (lista_decl -> lista_decl decl .)
    RBRACE          reduce using rule 2 (lista_decl -> lista_decl decl .)
    BREAK           reduce using rule 2 (lista_decl -> lista_decl decl .)
    IF              reduce using rule 2 (lista_decl -> lista_decl decl .)
    WHILE           reduce using rule 2 (lista_decl -> lista_decl decl .)
    DO              reduce using rule 2 (lista_decl -> lista_decl decl .)
    READ            reduce using rule 2 (lista_decl -> lista_decl decl .)
    WRITE           reduce using rule 2 (lista_decl -> lista_decl decl .)
    LBRACE          reduce using rule 2 (lista_decl -> lista_decl decl .)
    ID              reduce using rule 2 (lista_decl -> lista_decl decl .)


state 8

    (11) lista_sent -> empty .

    RBRACE          reduce using rule 11 (lista_sent -> empty .)
    BREAK           reduce using rule 11 (lista_sent -> empty .)
    IF              reduce using rule 11 (lista_sent -> empty .)
    WHILE           reduce using rule 11 (lista_sent -> empty .)
    DO              reduce using rule 11 (lista_sent -> empty .)
    READ            reduce using rule 11 (lista_sent -> empty .)
    WRITE           reduce using rule 11 (lista_sent -> empty .)
    LBRACE          reduce using rule 11 (lista_sent -> empty .)
    ID              reduce using rule 11 (lista_sent -> empty .)


state 9

    (4) decl -> tipo . lista_id SEMICOLON
    (8) lista_id -> . lista_id COMMA ID
    (9) lista_id -> . ID

    ID              shift and go to state 31

    lista_id                       shift and go to state 30

state 10

    (5) tipo -> INT .

    ID              reduce using rule 5 (tipo -> INT .)


state 11

    (6) tipo -> FLOAT .

    ID              reduce using rule 6 (tipo -> FLOAT .)


state 12

    (7) tipo -> BOOL .

    ID              reduce using rule 7 (tipo -> BOOL .)


state 13

    (26) bloque -> LBRACE . lista_sent RBRACE
    (10) lista_sent -> . lista_sent sent
    (11) lista_sent -> . empty
    (55) empty -> .

    RBRACE          reduce using rule 55 (empty -> .)
    BREAK           reduce using rule 55 (empty -> .)
    IF              reduce using rule 55 (empty -> .)
    WHILE           reduce using rule 55 (empty -> .)
    DO              reduce using rule 55 (empty -> .)
    READ            reduce using rule 55 (empty -> .)
    WRITE           reduce using rule 55 (empty -> .)
    LBRACE          reduce using rule 55 (empty -> .)
    ID              reduce using rule 55 (empty -> .)

    lista_sent                     shift and go to state 32
    empty                          shift and go to state 8

state 14

    (1) programa -> MAIN LBRACE lista_decl lista_sent RBRACE .

    $end            reduce using rule 1 (programa -> MAIN LBRACE lista_decl lista_sent RBRACE .)


state 15

    (10) lista_sent -> lista_sent sent .

    RBRACE          reduce using rule 10 (lista_sent -> lista_sent sent .)
    BREAK           reduce using rule 10 (lista_sent -> lista_sent sent .)
    IF              reduce using rule 10 (lista_sent -> lista_sent sent .)
    WHILE           reduce using rule 10 (lista_sent -> lista_sent sent .)
    DO              reduce using rule 10 (lista_sent -> lista_sent sent .)
    READ            reduce using rule 10 (lista_sent -> lista_sent sent .)
    WRITE           reduce using rule 10 (lista_sent -> lista_sent sent .)
    LBRACE          reduce using rule 10 (lista_sent -> lista_sent sent .)
    ID              reduce using rule 10 (lista_sent -> lista_sent sent .)


state 16

    (12) sent -> sent_if .

    RBRACE          reduce using rule 12 (sent -> sent_if .)
    BREAK           reduce using rule 12 (sent -> sent_if .)
    IF              reduce using rule 12 (sent -> sent_if .)
    WHILE           reduce using rule 12 (sent -> sent_if .)
    DO              reduce using rule 12 (sent -> sent_if .)
    READ            reduce using rule 12 (sent -> sent_if .)
    WRITE           reduce using rule 12 (sent -> sent_if .)
    LBRACE          reduce using rule 12 (sent -> sent_if .)
    ID              reduce using rule 12 (sent -> sent_if .)


state 17

    (13) sent -> sent_while .

    RBRACE          reduce using rule 13 (sent -> sent_while .)
    BREAK           reduce using rule 13 (sent -> sent_while .)
    IF              reduce using rule 13 (sent -> sent_while .)
    WHILE           reduce using rule 13 (sent -> sent_while .)
    DO              reduce using rule 13 (sent -> sent_while .)
    READ            reduce using rule 13 (sent -> sent_while .)
    WRITE           reduce using rule 13 (sent -> sent_while .)
    LBRACE          reduce using rule 13 (sent -> sent_while .)
    ID              reduce using rule 13 (sent -> sent_while .)


state 18

    (14) sent -> sent_do .

    RBRACE          reduce using rule 14 (sent -> sent_do .)
    BREAK           reduce using rule 14 (sent -> sent_do .)
    IF              reduce using rule 14 (sent -> sent_do .)
    WHILE           reduce using rule 14 (sent -> sent_do .)
    DO              reduce using rule 14 (sent -> sent_do .)
    READ            reduce using rule 14 (sent -> sent_do .)
    WRITE           reduce using rule 14 (sent -> sent_do .)
    LBRACE          reduce using rule 14 (sent -> sent_do .)
    ID              reduce using rule 14 (sent -> sent_do .)


state 19

    (15) sent -> sent_read .

    RBRACE          reduce using rule 15 (sent -> sent_read .)
    BREAK           reduce using rule 15 (sent -> sent_read .)
    IF              reduce using rule 15 (sent -> sent_read .)
    WHILE           reduce using rule 15 (sent -> sent_read .)
    DO              reduce using rule 15 (sent -> sent_read .)
    READ            reduce using rule 15 (sent -> sent_read .)
    WRITE           reduce using rule 15 (sent -> sent_read .)
    LBRACE          reduce using rule 15 (sent -> sent_read .)
    ID              reduce using rule 15 (sent -> sent_read .)


state 20

    (16) sent -> sent_write .

    RBRACE          reduce using rule 16 (sent -> sent_write .)
    BREAK           reduce using rule 16 (sent -> sent_write .)
    IF              reduce using rule 16 (sent -> sent_write .)
    WHILE           reduce using rule 16 (sent -> sent_write .)
    DO              reduce using rule 16 (sent -> sent_write .)
    READ            reduce using rule 16 (sent -> sent_write .)
    WRITE           reduce using rule 16 (sent -> sent_write .)
    LBRACE          reduce using rule 16 (sent -> sent_write .)
    ID              reduce using rule 16 (sent -> sent_write .)


state 21

    (17) sent -> bloque .

    RBRACE          reduce using rule 17 (sent -> bloque .)
    BREAK           reduce using rule 17 (sent -> bloque .)
    IF              reduce using rule 17 (sent -> bloque .)
    WHILE           reduce using rule 17 (sent -> bloque .)
    DO              reduce using rule 17 (sent -> bloque .)
    READ            reduce using rule 17 (sent -> bloque .)
    WRITE           reduce using rule 17 (sent -> bloque .)
    LBRACE          reduce using rule 17 (sent -> bloque .)
    ID              reduce using rule 17 (sent -> bloque .)


state 22

    (18) sent -> sent_assign .

    RBRACE          reduce using rule 18 (sent -> sent_assign .)
    BREAK           reduce using rule 18 (sent -> sent_assign .)
    IF              reduce using rule 18 (sent -> sent_assign .)
    WHILE           reduce using rule 18 (sent -> sent_assign .)
    DO              reduce using rule 18 (sent -> sent_assign .)
    READ            reduce using rule 18 (sent -> sent_assign .)
    WRITE           reduce using rule 18 (sent -> sent_assign .)
    LBRACE          reduce using rule 18 (sent -> sent_assign .)
    ID              reduce using rule 18 (sent -> sent_assign .)


state 23

    (19) sent -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 33


state 24

    (20) sent_if -> IF . LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI
    (21) sent_if -> IF . LPAREN exp_bool RPAREN THEN bloque FI

    LPAREN          shift and go to state 34


state 25

    (22) sent_while -> WHILE . LPAREN exp_bool RPAREN bloque

    LPAREN          shift and go to state 35


state 26

    (23) sent_do -> DO . bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON
    (26) bloque -> . LBRACE lista_sent RBRACE

    LBRACE          shift and go to state 13

    bloque                         shift and go to state 36

state 27

    (24) sent_read -> READ . ID SEMICOLON

    ID              shift and go to state 37


state 28

    (27) sent_assign -> ID . EQUALS exp_bool SEMICOLON

    EQUALS          shift and go to state 38


state 29

    (25) sent_write -> WRITE . exp_bool SEMICOLON
    (28) exp_bool -> . exp_bool OR comb
    (29) exp_bool -> . comb
    (30) comb -> . comb AND igualdad
    (31) comb -> . igualdad
    (32) igualdad -> . igualdad EQ rel
    (33) igualdad -> . igualdad NE rel
    (34) igualdad -> . rel
    (35) rel -> . expr LT expr
    (36) rel -> . expr LE expr
    (37) rel -> . expr GT expr
    (38) rel -> . expr GE expr
    (39) rel -> . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    exp_bool                       shift and go to state 39
    comb                           shift and go to state 40
    igualdad                       shift and go to state 41
    rel                            shift and go to state 42
    expr                           shift and go to state 43
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 30

    (4) decl -> tipo lista_id . SEMICOLON
    (8) lista_id -> lista_id . COMMA ID

    SEMICOLON       shift and go to state 55
    COMMA           shift and go to state 56


state 31

    (9) lista_id -> ID .

    SEMICOLON       reduce using rule 9 (lista_id -> ID .)
    COMMA           reduce using rule 9 (lista_id -> ID .)


state 32

    (26) bloque -> LBRACE lista_sent . RBRACE
    (10) lista_sent -> lista_sent . sent
    (12) sent -> . sent_if
    (13) sent -> . sent_while
    (14) sent -> . sent_do
    (15) sent -> . sent_read
    (16) sent -> . sent_write
    (17) sent -> . bloque
    (18) sent -> . sent_assign
    (19) sent -> . BREAK SEMICOLON
    (20) sent_if -> . IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI
    (21) sent_if -> . IF LPAREN exp_bool RPAREN THEN bloque FI
    (22) sent_while -> . WHILE LPAREN exp_bool RPAREN bloque
    (23) sent_do -> . DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON
    (24) sent_read -> . READ ID SEMICOLON
    (25) sent_write -> . WRITE exp_bool SEMICOLON
    (26) bloque -> . LBRACE lista_sent RBRACE
    (27) sent_assign -> . ID EQUALS exp_bool SEMICOLON

    RBRACE          shift and go to state 57
    BREAK           shift and go to state 23
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    READ            shift and go to state 27
    WRITE           shift and go to state 29
    LBRACE          shift and go to state 13
    ID              shift and go to state 28

    sent                           shift and go to state 15
    sent_if                        shift and go to state 16
    sent_while                     shift and go to state 17
    sent_do                        shift and go to state 18
    sent_read                      shift and go to state 19
    sent_write                     shift and go to state 20
    bloque                         shift and go to state 21
    sent_assign                    shift and go to state 22

state 33

    (19) sent -> BREAK SEMICOLON .

    RBRACE          reduce using rule 19 (sent -> BREAK SEMICOLON .)
    BREAK           reduce using rule 19 (sent -> BREAK SEMICOLON .)
    IF              reduce using rule 19 (sent -> BREAK SEMICOLON .)
    WHILE           reduce using rule 19 (sent -> BREAK SEMICOLON .)
    DO              reduce using rule 19 (sent -> BREAK SEMICOLON .)
    READ            reduce using rule 19 (sent -> BREAK SEMICOLON .)
    WRITE           reduce using rule 19 (sent -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 19 (sent -> BREAK SEMICOLON .)
    ID              reduce using rule 19 (sent -> BREAK SEMICOLON .)


state 34

    (20) sent_if -> IF LPAREN . exp_bool RPAREN THEN bloque ELSE bloque FI
    (21) sent_if -> IF LPAREN . exp_bool RPAREN THEN bloque FI
    (28) exp_bool -> . exp_bool OR comb
    (29) exp_bool -> . comb
    (30) comb -> . comb AND igualdad
    (31) comb -> . igualdad
    (32) igualdad -> . igualdad EQ rel
    (33) igualdad -> . igualdad NE rel
    (34) igualdad -> . rel
    (35) rel -> . expr LT expr
    (36) rel -> . expr LE expr
    (37) rel -> . expr GT expr
    (38) rel -> . expr GE expr
    (39) rel -> . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    exp_bool                       shift and go to state 58
    comb                           shift and go to state 40
    igualdad                       shift and go to state 41
    rel                            shift and go to state 42
    expr                           shift and go to state 43
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 35

    (22) sent_while -> WHILE LPAREN . exp_bool RPAREN bloque
    (28) exp_bool -> . exp_bool OR comb
    (29) exp_bool -> . comb
    (30) comb -> . comb AND igualdad
    (31) comb -> . igualdad
    (32) igualdad -> . igualdad EQ rel
    (33) igualdad -> . igualdad NE rel
    (34) igualdad -> . rel
    (35) rel -> . expr LT expr
    (36) rel -> . expr LE expr
    (37) rel -> . expr GT expr
    (38) rel -> . expr GE expr
    (39) rel -> . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    exp_bool                       shift and go to state 59
    comb                           shift and go to state 40
    igualdad                       shift and go to state 41
    rel                            shift and go to state 42
    expr                           shift and go to state 43
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 36

    (23) sent_do -> DO bloque . UNTIL LPAREN exp_bool RPAREN SEMICOLON

    UNTIL           shift and go to state 60


state 37

    (24) sent_read -> READ ID . SEMICOLON

    SEMICOLON       shift and go to state 61


state 38

    (27) sent_assign -> ID EQUALS . exp_bool SEMICOLON
    (28) exp_bool -> . exp_bool OR comb
    (29) exp_bool -> . comb
    (30) comb -> . comb AND igualdad
    (31) comb -> . igualdad
    (32) igualdad -> . igualdad EQ rel
    (33) igualdad -> . igualdad NE rel
    (34) igualdad -> . rel
    (35) rel -> . expr LT expr
    (36) rel -> . expr LE expr
    (37) rel -> . expr GT expr
    (38) rel -> . expr GE expr
    (39) rel -> . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    exp_bool                       shift and go to state 62
    comb                           shift and go to state 40
    igualdad                       shift and go to state 41
    rel                            shift and go to state 42
    expr                           shift and go to state 43
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 39

    (25) sent_write -> WRITE exp_bool . SEMICOLON
    (28) exp_bool -> exp_bool . OR comb

    SEMICOLON       shift and go to state 63
    OR              shift and go to state 64


state 40

    (29) exp_bool -> comb .
    (30) comb -> comb . AND igualdad

    SEMICOLON       reduce using rule 29 (exp_bool -> comb .)
    OR              reduce using rule 29 (exp_bool -> comb .)
    RPAREN          reduce using rule 29 (exp_bool -> comb .)
    AND             shift and go to state 65


state 41

    (31) comb -> igualdad .
    (32) igualdad -> igualdad . EQ rel
    (33) igualdad -> igualdad . NE rel

    AND             reduce using rule 31 (comb -> igualdad .)
    SEMICOLON       reduce using rule 31 (comb -> igualdad .)
    OR              reduce using rule 31 (comb -> igualdad .)
    RPAREN          reduce using rule 31 (comb -> igualdad .)
    EQ              shift and go to state 66
    NE              shift and go to state 67


state 42

    (34) igualdad -> rel .

    EQ              reduce using rule 34 (igualdad -> rel .)
    NE              reduce using rule 34 (igualdad -> rel .)
    AND             reduce using rule 34 (igualdad -> rel .)
    SEMICOLON       reduce using rule 34 (igualdad -> rel .)
    OR              reduce using rule 34 (igualdad -> rel .)
    RPAREN          reduce using rule 34 (igualdad -> rel .)


state 43

    (35) rel -> expr . LT expr
    (36) rel -> expr . LE expr
    (37) rel -> expr . GT expr
    (38) rel -> expr . GE expr
    (39) rel -> expr .
    (40) expr -> expr . PLUS term
    (41) expr -> expr . MINUS term

    LT              shift and go to state 68
    LE              shift and go to state 69
    GT              shift and go to state 70
    GE              shift and go to state 71
    EQ              reduce using rule 39 (rel -> expr .)
    NE              reduce using rule 39 (rel -> expr .)
    AND             reduce using rule 39 (rel -> expr .)
    SEMICOLON       reduce using rule 39 (rel -> expr .)
    OR              reduce using rule 39 (rel -> expr .)
    RPAREN          reduce using rule 39 (rel -> expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 44

    (42) expr -> term .
    (43) term -> term . TIMES unario
    (44) term -> term . DIVIDE unario

    LT              reduce using rule 42 (expr -> term .)
    LE              reduce using rule 42 (expr -> term .)
    GT              reduce using rule 42 (expr -> term .)
    GE              reduce using rule 42 (expr -> term .)
    PLUS            reduce using rule 42 (expr -> term .)
    MINUS           reduce using rule 42 (expr -> term .)
    EQ              reduce using rule 42 (expr -> term .)
    NE              reduce using rule 42 (expr -> term .)
    AND             reduce using rule 42 (expr -> term .)
    SEMICOLON       reduce using rule 42 (expr -> term .)
    OR              reduce using rule 42 (expr -> term .)
    RPAREN          reduce using rule 42 (expr -> term .)
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75


state 45

    (47) unario -> MINUS . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    unario                         shift and go to state 76
    factor                         shift and go to state 48

state 46

    (45) term -> unario .

    TIMES           reduce using rule 45 (term -> unario .)
    DIVIDE          reduce using rule 45 (term -> unario .)
    LT              reduce using rule 45 (term -> unario .)
    LE              reduce using rule 45 (term -> unario .)
    GT              reduce using rule 45 (term -> unario .)
    GE              reduce using rule 45 (term -> unario .)
    PLUS            reduce using rule 45 (term -> unario .)
    MINUS           reduce using rule 45 (term -> unario .)
    EQ              reduce using rule 45 (term -> unario .)
    NE              reduce using rule 45 (term -> unario .)
    AND             reduce using rule 45 (term -> unario .)
    SEMICOLON       reduce using rule 45 (term -> unario .)
    OR              reduce using rule 45 (term -> unario .)
    RPAREN          reduce using rule 45 (term -> unario .)


state 47

    (46) unario -> NOT . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    unario                         shift and go to state 77
    factor                         shift and go to state 48

state 48

    (48) unario -> factor .

    TIMES           reduce using rule 48 (unario -> factor .)
    DIVIDE          reduce using rule 48 (unario -> factor .)
    LT              reduce using rule 48 (unario -> factor .)
    LE              reduce using rule 48 (unario -> factor .)
    GT              reduce using rule 48 (unario -> factor .)
    GE              reduce using rule 48 (unario -> factor .)
    PLUS            reduce using rule 48 (unario -> factor .)
    MINUS           reduce using rule 48 (unario -> factor .)
    EQ              reduce using rule 48 (unario -> factor .)
    NE              reduce using rule 48 (unario -> factor .)
    AND             reduce using rule 48 (unario -> factor .)
    SEMICOLON       reduce using rule 48 (unario -> factor .)
    OR              reduce using rule 48 (unario -> factor .)
    RPAREN          reduce using rule 48 (unario -> factor .)


state 49

    (49) factor -> NUMBERINT .

    TIMES           reduce using rule 49 (factor -> NUMBERINT .)
    DIVIDE          reduce using rule 49 (factor -> NUMBERINT .)
    LT              reduce using rule 49 (factor -> NUMBERINT .)
    LE              reduce using rule 49 (factor -> NUMBERINT .)
    GT              reduce using rule 49 (factor -> NUMBERINT .)
    GE              reduce using rule 49 (factor -> NUMBERINT .)
    PLUS            reduce using rule 49 (factor -> NUMBERINT .)
    MINUS           reduce using rule 49 (factor -> NUMBERINT .)
    EQ              reduce using rule 49 (factor -> NUMBERINT .)
    NE              reduce using rule 49 (factor -> NUMBERINT .)
    AND             reduce using rule 49 (factor -> NUMBERINT .)
    SEMICOLON       reduce using rule 49 (factor -> NUMBERINT .)
    OR              reduce using rule 49 (factor -> NUMBERINT .)
    RPAREN          reduce using rule 49 (factor -> NUMBERINT .)


state 50

    (50) factor -> NUMBERFLOAT .

    TIMES           reduce using rule 50 (factor -> NUMBERFLOAT .)
    DIVIDE          reduce using rule 50 (factor -> NUMBERFLOAT .)
    LT              reduce using rule 50 (factor -> NUMBERFLOAT .)
    LE              reduce using rule 50 (factor -> NUMBERFLOAT .)
    GT              reduce using rule 50 (factor -> NUMBERFLOAT .)
    GE              reduce using rule 50 (factor -> NUMBERFLOAT .)
    PLUS            reduce using rule 50 (factor -> NUMBERFLOAT .)
    MINUS           reduce using rule 50 (factor -> NUMBERFLOAT .)
    EQ              reduce using rule 50 (factor -> NUMBERFLOAT .)
    NE              reduce using rule 50 (factor -> NUMBERFLOAT .)
    AND             reduce using rule 50 (factor -> NUMBERFLOAT .)
    SEMICOLON       reduce using rule 50 (factor -> NUMBERFLOAT .)
    OR              reduce using rule 50 (factor -> NUMBERFLOAT .)
    RPAREN          reduce using rule 50 (factor -> NUMBERFLOAT .)


state 51

    (51) factor -> ID .

    TIMES           reduce using rule 51 (factor -> ID .)
    DIVIDE          reduce using rule 51 (factor -> ID .)
    LT              reduce using rule 51 (factor -> ID .)
    LE              reduce using rule 51 (factor -> ID .)
    GT              reduce using rule 51 (factor -> ID .)
    GE              reduce using rule 51 (factor -> ID .)
    PLUS            reduce using rule 51 (factor -> ID .)
    MINUS           reduce using rule 51 (factor -> ID .)
    EQ              reduce using rule 51 (factor -> ID .)
    NE              reduce using rule 51 (factor -> ID .)
    AND             reduce using rule 51 (factor -> ID .)
    SEMICOLON       reduce using rule 51 (factor -> ID .)
    OR              reduce using rule 51 (factor -> ID .)
    RPAREN          reduce using rule 51 (factor -> ID .)


state 52

    (52) factor -> LPAREN . exp_bool RPAREN
    (28) exp_bool -> . exp_bool OR comb
    (29) exp_bool -> . comb
    (30) comb -> . comb AND igualdad
    (31) comb -> . igualdad
    (32) igualdad -> . igualdad EQ rel
    (33) igualdad -> . igualdad NE rel
    (34) igualdad -> . rel
    (35) rel -> . expr LT expr
    (36) rel -> . expr LE expr
    (37) rel -> . expr GT expr
    (38) rel -> . expr GE expr
    (39) rel -> . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    exp_bool                       shift and go to state 78
    comb                           shift and go to state 40
    igualdad                       shift and go to state 41
    rel                            shift and go to state 42
    expr                           shift and go to state 43
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 53

    (53) factor -> TRUE .

    TIMES           reduce using rule 53 (factor -> TRUE .)
    DIVIDE          reduce using rule 53 (factor -> TRUE .)
    LT              reduce using rule 53 (factor -> TRUE .)
    LE              reduce using rule 53 (factor -> TRUE .)
    GT              reduce using rule 53 (factor -> TRUE .)
    GE              reduce using rule 53 (factor -> TRUE .)
    PLUS            reduce using rule 53 (factor -> TRUE .)
    MINUS           reduce using rule 53 (factor -> TRUE .)
    EQ              reduce using rule 53 (factor -> TRUE .)
    NE              reduce using rule 53 (factor -> TRUE .)
    AND             reduce using rule 53 (factor -> TRUE .)
    SEMICOLON       reduce using rule 53 (factor -> TRUE .)
    OR              reduce using rule 53 (factor -> TRUE .)
    RPAREN          reduce using rule 53 (factor -> TRUE .)


state 54

    (54) factor -> FALSE .

    TIMES           reduce using rule 54 (factor -> FALSE .)
    DIVIDE          reduce using rule 54 (factor -> FALSE .)
    LT              reduce using rule 54 (factor -> FALSE .)
    LE              reduce using rule 54 (factor -> FALSE .)
    GT              reduce using rule 54 (factor -> FALSE .)
    GE              reduce using rule 54 (factor -> FALSE .)
    PLUS            reduce using rule 54 (factor -> FALSE .)
    MINUS           reduce using rule 54 (factor -> FALSE .)
    EQ              reduce using rule 54 (factor -> FALSE .)
    NE              reduce using rule 54 (factor -> FALSE .)
    AND             reduce using rule 54 (factor -> FALSE .)
    SEMICOLON       reduce using rule 54 (factor -> FALSE .)
    OR              reduce using rule 54 (factor -> FALSE .)
    RPAREN          reduce using rule 54 (factor -> FALSE .)


state 55

    (4) decl -> tipo lista_id SEMICOLON .

    INT             reduce using rule 4 (decl -> tipo lista_id SEMICOLON .)
    FLOAT           reduce using rule 4 (decl -> tipo lista_id SEMICOLON .)
    BOOL            reduce using rule 4 (decl -> tipo lista_id SEMICOLON .)
    RBRACE          reduce using rule 4 (decl -> tipo lista_id SEMICOLON .)
    BREAK           reduce using rule 4 (decl -> tipo lista_id SEMICOLON .)
    IF              reduce using rule 4 (decl -> tipo lista_id SEMICOLON .)
    WHILE           reduce using rule 4 (decl -> tipo lista_id SEMICOLON .)
    DO              reduce using rule 4 (decl -> tipo lista_id SEMICOLON .)
    READ            reduce using rule 4 (decl -> tipo lista_id SEMICOLON .)
    WRITE           reduce using rule 4 (decl -> tipo lista_id SEMICOLON .)
    LBRACE          reduce using rule 4 (decl -> tipo lista_id SEMICOLON .)
    ID              reduce using rule 4 (decl -> tipo lista_id SEMICOLON .)


state 56

    (8) lista_id -> lista_id COMMA . ID

    ID              shift and go to state 79


state 57

    (26) bloque -> LBRACE lista_sent RBRACE .

    RBRACE          reduce using rule 26 (bloque -> LBRACE lista_sent RBRACE .)
    BREAK           reduce using rule 26 (bloque -> LBRACE lista_sent RBRACE .)
    IF              reduce using rule 26 (bloque -> LBRACE lista_sent RBRACE .)
    WHILE           reduce using rule 26 (bloque -> LBRACE lista_sent RBRACE .)
    DO              reduce using rule 26 (bloque -> LBRACE lista_sent RBRACE .)
    READ            reduce using rule 26 (bloque -> LBRACE lista_sent RBRACE .)
    WRITE           reduce using rule 26 (bloque -> LBRACE lista_sent RBRACE .)
    LBRACE          reduce using rule 26 (bloque -> LBRACE lista_sent RBRACE .)
    ID              reduce using rule 26 (bloque -> LBRACE lista_sent RBRACE .)
    UNTIL           reduce using rule 26 (bloque -> LBRACE lista_sent RBRACE .)
    ELSE            reduce using rule 26 (bloque -> LBRACE lista_sent RBRACE .)
    FI              reduce using rule 26 (bloque -> LBRACE lista_sent RBRACE .)


state 58

    (20) sent_if -> IF LPAREN exp_bool . RPAREN THEN bloque ELSE bloque FI
    (21) sent_if -> IF LPAREN exp_bool . RPAREN THEN bloque FI
    (28) exp_bool -> exp_bool . OR comb

    RPAREN          shift and go to state 80
    OR              shift and go to state 64


state 59

    (22) sent_while -> WHILE LPAREN exp_bool . RPAREN bloque
    (28) exp_bool -> exp_bool . OR comb

    RPAREN          shift and go to state 81
    OR              shift and go to state 64


state 60

    (23) sent_do -> DO bloque UNTIL . LPAREN exp_bool RPAREN SEMICOLON

    LPAREN          shift and go to state 82


state 61

    (24) sent_read -> READ ID SEMICOLON .

    RBRACE          reduce using rule 24 (sent_read -> READ ID SEMICOLON .)
    BREAK           reduce using rule 24 (sent_read -> READ ID SEMICOLON .)
    IF              reduce using rule 24 (sent_read -> READ ID SEMICOLON .)
    WHILE           reduce using rule 24 (sent_read -> READ ID SEMICOLON .)
    DO              reduce using rule 24 (sent_read -> READ ID SEMICOLON .)
    READ            reduce using rule 24 (sent_read -> READ ID SEMICOLON .)
    WRITE           reduce using rule 24 (sent_read -> READ ID SEMICOLON .)
    LBRACE          reduce using rule 24 (sent_read -> READ ID SEMICOLON .)
    ID              reduce using rule 24 (sent_read -> READ ID SEMICOLON .)


state 62

    (27) sent_assign -> ID EQUALS exp_bool . SEMICOLON
    (28) exp_bool -> exp_bool . OR comb

    SEMICOLON       shift and go to state 83
    OR              shift and go to state 64


state 63

    (25) sent_write -> WRITE exp_bool SEMICOLON .

    RBRACE          reduce using rule 25 (sent_write -> WRITE exp_bool SEMICOLON .)
    BREAK           reduce using rule 25 (sent_write -> WRITE exp_bool SEMICOLON .)
    IF              reduce using rule 25 (sent_write -> WRITE exp_bool SEMICOLON .)
    WHILE           reduce using rule 25 (sent_write -> WRITE exp_bool SEMICOLON .)
    DO              reduce using rule 25 (sent_write -> WRITE exp_bool SEMICOLON .)
    READ            reduce using rule 25 (sent_write -> WRITE exp_bool SEMICOLON .)
    WRITE           reduce using rule 25 (sent_write -> WRITE exp_bool SEMICOLON .)
    LBRACE          reduce using rule 25 (sent_write -> WRITE exp_bool SEMICOLON .)
    ID              reduce using rule 25 (sent_write -> WRITE exp_bool SEMICOLON .)


state 64

    (28) exp_bool -> exp_bool OR . comb
    (30) comb -> . comb AND igualdad
    (31) comb -> . igualdad
    (32) igualdad -> . igualdad EQ rel
    (33) igualdad -> . igualdad NE rel
    (34) igualdad -> . rel
    (35) rel -> . expr LT expr
    (36) rel -> . expr LE expr
    (37) rel -> . expr GT expr
    (38) rel -> . expr GE expr
    (39) rel -> . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    comb                           shift and go to state 84
    igualdad                       shift and go to state 41
    rel                            shift and go to state 42
    expr                           shift and go to state 43
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 65

    (30) comb -> comb AND . igualdad
    (32) igualdad -> . igualdad EQ rel
    (33) igualdad -> . igualdad NE rel
    (34) igualdad -> . rel
    (35) rel -> . expr LT expr
    (36) rel -> . expr LE expr
    (37) rel -> . expr GT expr
    (38) rel -> . expr GE expr
    (39) rel -> . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    igualdad                       shift and go to state 85
    rel                            shift and go to state 42
    expr                           shift and go to state 43
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 66

    (32) igualdad -> igualdad EQ . rel
    (35) rel -> . expr LT expr
    (36) rel -> . expr LE expr
    (37) rel -> . expr GT expr
    (38) rel -> . expr GE expr
    (39) rel -> . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    rel                            shift and go to state 86
    expr                           shift and go to state 43
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 67

    (33) igualdad -> igualdad NE . rel
    (35) rel -> . expr LT expr
    (36) rel -> . expr LE expr
    (37) rel -> . expr GT expr
    (38) rel -> . expr GE expr
    (39) rel -> . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    rel                            shift and go to state 87
    expr                           shift and go to state 43
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 68

    (35) rel -> expr LT . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expr                           shift and go to state 88
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 69

    (36) rel -> expr LE . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expr                           shift and go to state 89
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 70

    (37) rel -> expr GT . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expr                           shift and go to state 90
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 71

    (38) rel -> expr GE . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expr                           shift and go to state 91
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 72

    (40) expr -> expr PLUS . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    term                           shift and go to state 92
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 73

    (41) expr -> expr MINUS . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    term                           shift and go to state 93
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 74

    (43) term -> term TIMES . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    unario                         shift and go to state 94
    factor                         shift and go to state 48

state 75

    (44) term -> term DIVIDE . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    unario                         shift and go to state 95
    factor                         shift and go to state 48

state 76

    (47) unario -> MINUS unario .

    TIMES           reduce using rule 47 (unario -> MINUS unario .)
    DIVIDE          reduce using rule 47 (unario -> MINUS unario .)
    LT              reduce using rule 47 (unario -> MINUS unario .)
    LE              reduce using rule 47 (unario -> MINUS unario .)
    GT              reduce using rule 47 (unario -> MINUS unario .)
    GE              reduce using rule 47 (unario -> MINUS unario .)
    PLUS            reduce using rule 47 (unario -> MINUS unario .)
    MINUS           reduce using rule 47 (unario -> MINUS unario .)
    EQ              reduce using rule 47 (unario -> MINUS unario .)
    NE              reduce using rule 47 (unario -> MINUS unario .)
    AND             reduce using rule 47 (unario -> MINUS unario .)
    SEMICOLON       reduce using rule 47 (unario -> MINUS unario .)
    OR              reduce using rule 47 (unario -> MINUS unario .)
    RPAREN          reduce using rule 47 (unario -> MINUS unario .)


state 77

    (46) unario -> NOT unario .

    TIMES           reduce using rule 46 (unario -> NOT unario .)
    DIVIDE          reduce using rule 46 (unario -> NOT unario .)
    LT              reduce using rule 46 (unario -> NOT unario .)
    LE              reduce using rule 46 (unario -> NOT unario .)
    GT              reduce using rule 46 (unario -> NOT unario .)
    GE              reduce using rule 46 (unario -> NOT unario .)
    PLUS            reduce using rule 46 (unario -> NOT unario .)
    MINUS           reduce using rule 46 (unario -> NOT unario .)
    EQ              reduce using rule 46 (unario -> NOT unario .)
    NE              reduce using rule 46 (unario -> NOT unario .)
    AND             reduce using rule 46 (unario -> NOT unario .)
    SEMICOLON       reduce using rule 46 (unario -> NOT unario .)
    OR              reduce using rule 46 (unario -> NOT unario .)
    RPAREN          reduce using rule 46 (unario -> NOT unario .)


state 78

    (52) factor -> LPAREN exp_bool . RPAREN
    (28) exp_bool -> exp_bool . OR comb

    RPAREN          shift and go to state 96
    OR              shift and go to state 64


state 79

    (8) lista_id -> lista_id COMMA ID .

    SEMICOLON       reduce using rule 8 (lista_id -> lista_id COMMA ID .)
    COMMA           reduce using rule 8 (lista_id -> lista_id COMMA ID .)


state 80

    (20) sent_if -> IF LPAREN exp_bool RPAREN . THEN bloque ELSE bloque FI
    (21) sent_if -> IF LPAREN exp_bool RPAREN . THEN bloque FI

    THEN            shift and go to state 97


state 81

    (22) sent_while -> WHILE LPAREN exp_bool RPAREN . bloque
    (26) bloque -> . LBRACE lista_sent RBRACE

    LBRACE          shift and go to state 13

    bloque                         shift and go to state 98

state 82

    (23) sent_do -> DO bloque UNTIL LPAREN . exp_bool RPAREN SEMICOLON
    (28) exp_bool -> . exp_bool OR comb
    (29) exp_bool -> . comb
    (30) comb -> . comb AND igualdad
    (31) comb -> . igualdad
    (32) igualdad -> . igualdad EQ rel
    (33) igualdad -> . igualdad NE rel
    (34) igualdad -> . rel
    (35) rel -> . expr LT expr
    (36) rel -> . expr LE expr
    (37) rel -> . expr GT expr
    (38) rel -> . expr GE expr
    (39) rel -> . expr
    (40) expr -> . expr PLUS term
    (41) expr -> . expr MINUS term
    (42) expr -> . term
    (43) term -> . term TIMES unario
    (44) term -> . term DIVIDE unario
    (45) term -> . unario
    (46) unario -> . NOT unario
    (47) unario -> . MINUS unario
    (48) unario -> . factor
    (49) factor -> . NUMBERINT
    (50) factor -> . NUMBERFLOAT
    (51) factor -> . ID
    (52) factor -> . LPAREN exp_bool RPAREN
    (53) factor -> . TRUE
    (54) factor -> . FALSE

    NOT             shift and go to state 47
    MINUS           shift and go to state 45
    NUMBERINT       shift and go to state 49
    NUMBERFLOAT     shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 52
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    exp_bool                       shift and go to state 99
    comb                           shift and go to state 40
    igualdad                       shift and go to state 41
    rel                            shift and go to state 42
    expr                           shift and go to state 43
    term                           shift and go to state 44
    unario                         shift and go to state 46
    factor                         shift and go to state 48

state 83

    (27) sent_assign -> ID EQUALS exp_bool SEMICOLON .

    RBRACE          reduce using rule 27 (sent_assign -> ID EQUALS exp_bool SEMICOLON .)
    BREAK           reduce using rule 27 (sent_assign -> ID EQUALS exp_bool SEMICOLON .)
    IF              reduce using rule 27 (sent_assign -> ID EQUALS exp_bool SEMICOLON .)
    WHILE           reduce using rule 27 (sent_assign -> ID EQUALS exp_bool SEMICOLON .)
    DO              reduce using rule 27 (sent_assign -> ID EQUALS exp_bool SEMICOLON .)
    READ            reduce using rule 27 (sent_assign -> ID EQUALS exp_bool SEMICOLON .)
    WRITE           reduce using rule 27 (sent_assign -> ID EQUALS exp_bool SEMICOLON .)
    LBRACE          reduce using rule 27 (sent_assign -> ID EQUALS exp_bool SEMICOLON .)
    ID              reduce using rule 27 (sent_assign -> ID EQUALS exp_bool SEMICOLON .)


state 84

    (28) exp_bool -> exp_bool OR comb .
    (30) comb -> comb . AND igualdad

    SEMICOLON       reduce using rule 28 (exp_bool -> exp_bool OR comb .)
    OR              reduce using rule 28 (exp_bool -> exp_bool OR comb .)
    RPAREN          reduce using rule 28 (exp_bool -> exp_bool OR comb .)
    AND             shift and go to state 65


state 85

    (30) comb -> comb AND igualdad .
    (32) igualdad -> igualdad . EQ rel
    (33) igualdad -> igualdad . NE rel

    AND             reduce using rule 30 (comb -> comb AND igualdad .)
    SEMICOLON       reduce using rule 30 (comb -> comb AND igualdad .)
    OR              reduce using rule 30 (comb -> comb AND igualdad .)
    RPAREN          reduce using rule 30 (comb -> comb AND igualdad .)
    EQ              shift and go to state 66
    NE              shift and go to state 67


state 86

    (32) igualdad -> igualdad EQ rel .

    EQ              reduce using rule 32 (igualdad -> igualdad EQ rel .)
    NE              reduce using rule 32 (igualdad -> igualdad EQ rel .)
    AND             reduce using rule 32 (igualdad -> igualdad EQ rel .)
    SEMICOLON       reduce using rule 32 (igualdad -> igualdad EQ rel .)
    OR              reduce using rule 32 (igualdad -> igualdad EQ rel .)
    RPAREN          reduce using rule 32 (igualdad -> igualdad EQ rel .)


state 87

    (33) igualdad -> igualdad NE rel .

    EQ              reduce using rule 33 (igualdad -> igualdad NE rel .)
    NE              reduce using rule 33 (igualdad -> igualdad NE rel .)
    AND             reduce using rule 33 (igualdad -> igualdad NE rel .)
    SEMICOLON       reduce using rule 33 (igualdad -> igualdad NE rel .)
    OR              reduce using rule 33 (igualdad -> igualdad NE rel .)
    RPAREN          reduce using rule 33 (igualdad -> igualdad NE rel .)


state 88

    (35) rel -> expr LT expr .
    (40) expr -> expr . PLUS term
    (41) expr -> expr . MINUS term

    EQ              reduce using rule 35 (rel -> expr LT expr .)
    NE              reduce using rule 35 (rel -> expr LT expr .)
    AND             reduce using rule 35 (rel -> expr LT expr .)
    SEMICOLON       reduce using rule 35 (rel -> expr LT expr .)
    OR              reduce using rule 35 (rel -> expr LT expr .)
    RPAREN          reduce using rule 35 (rel -> expr LT expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 89

    (36) rel -> expr LE expr .
    (40) expr -> expr . PLUS term
    (41) expr -> expr . MINUS term

    EQ              reduce using rule 36 (rel -> expr LE expr .)
    NE              reduce using rule 36 (rel -> expr LE expr .)
    AND             reduce using rule 36 (rel -> expr LE expr .)
    SEMICOLON       reduce using rule 36 (rel -> expr LE expr .)
    OR              reduce using rule 36 (rel -> expr LE expr .)
    RPAREN          reduce using rule 36 (rel -> expr LE expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 90

    (37) rel -> expr GT expr .
    (40) expr -> expr . PLUS term
    (41) expr -> expr . MINUS term

    EQ              reduce using rule 37 (rel -> expr GT expr .)
    NE              reduce using rule 37 (rel -> expr GT expr .)
    AND             reduce using rule 37 (rel -> expr GT expr .)
    SEMICOLON       reduce using rule 37 (rel -> expr GT expr .)
    OR              reduce using rule 37 (rel -> expr GT expr .)
    RPAREN          reduce using rule 37 (rel -> expr GT expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 91

    (38) rel -> expr GE expr .
    (40) expr -> expr . PLUS term
    (41) expr -> expr . MINUS term

    EQ              reduce using rule 38 (rel -> expr GE expr .)
    NE              reduce using rule 38 (rel -> expr GE expr .)
    AND             reduce using rule 38 (rel -> expr GE expr .)
    SEMICOLON       reduce using rule 38 (rel -> expr GE expr .)
    OR              reduce using rule 38 (rel -> expr GE expr .)
    RPAREN          reduce using rule 38 (rel -> expr GE expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73


state 92

    (40) expr -> expr PLUS term .
    (43) term -> term . TIMES unario
    (44) term -> term . DIVIDE unario

    LT              reduce using rule 40 (expr -> expr PLUS term .)
    LE              reduce using rule 40 (expr -> expr PLUS term .)
    GT              reduce using rule 40 (expr -> expr PLUS term .)
    GE              reduce using rule 40 (expr -> expr PLUS term .)
    PLUS            reduce using rule 40 (expr -> expr PLUS term .)
    MINUS           reduce using rule 40 (expr -> expr PLUS term .)
    EQ              reduce using rule 40 (expr -> expr PLUS term .)
    NE              reduce using rule 40 (expr -> expr PLUS term .)
    AND             reduce using rule 40 (expr -> expr PLUS term .)
    SEMICOLON       reduce using rule 40 (expr -> expr PLUS term .)
    OR              reduce using rule 40 (expr -> expr PLUS term .)
    RPAREN          reduce using rule 40 (expr -> expr PLUS term .)
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75


state 93

    (41) expr -> expr MINUS term .
    (43) term -> term . TIMES unario
    (44) term -> term . DIVIDE unario

    LT              reduce using rule 41 (expr -> expr MINUS term .)
    LE              reduce using rule 41 (expr -> expr MINUS term .)
    GT              reduce using rule 41 (expr -> expr MINUS term .)
    GE              reduce using rule 41 (expr -> expr MINUS term .)
    PLUS            reduce using rule 41 (expr -> expr MINUS term .)
    MINUS           reduce using rule 41 (expr -> expr MINUS term .)
    EQ              reduce using rule 41 (expr -> expr MINUS term .)
    NE              reduce using rule 41 (expr -> expr MINUS term .)
    AND             reduce using rule 41 (expr -> expr MINUS term .)
    SEMICOLON       reduce using rule 41 (expr -> expr MINUS term .)
    OR              reduce using rule 41 (expr -> expr MINUS term .)
    RPAREN          reduce using rule 41 (expr -> expr MINUS term .)
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75


state 94

    (43) term -> term TIMES unario .

    TIMES           reduce using rule 43 (term -> term TIMES unario .)
    DIVIDE          reduce using rule 43 (term -> term TIMES unario .)
    LT              reduce using rule 43 (term -> term TIMES unario .)
    LE              reduce using rule 43 (term -> term TIMES unario .)
    GT              reduce using rule 43 (term -> term TIMES unario .)
    GE              reduce using rule 43 (term -> term TIMES unario .)
    PLUS            reduce using rule 43 (term -> term TIMES unario .)
    MINUS           reduce using rule 43 (term -> term TIMES unario .)
    EQ              reduce using rule 43 (term -> term TIMES unario .)
    NE              reduce using rule 43 (term -> term TIMES unario .)
    AND             reduce using rule 43 (term -> term TIMES unario .)
    SEMICOLON       reduce using rule 43 (term -> term TIMES unario .)
    OR              reduce using rule 43 (term -> term TIMES unario .)
    RPAREN          reduce using rule 43 (term -> term TIMES unario .)


state 95

    (44) term -> term DIVIDE unario .

    TIMES           reduce using rule 44 (term -> term DIVIDE unario .)
    DIVIDE          reduce using rule 44 (term -> term DIVIDE unario .)
    LT              reduce using rule 44 (term -> term DIVIDE unario .)
    LE              reduce using rule 44 (term -> term DIVIDE unario .)
    GT              reduce using rule 44 (term -> term DIVIDE unario .)
    GE              reduce using rule 44 (term -> term DIVIDE unario .)
    PLUS            reduce using rule 44 (term -> term DIVIDE unario .)
    MINUS           reduce using rule 44 (term -> term DIVIDE unario .)
    EQ              reduce using rule 44 (term -> term DIVIDE unario .)
    NE              reduce using rule 44 (term -> term DIVIDE unario .)
    AND             reduce using rule 44 (term -> term DIVIDE unario .)
    SEMICOLON       reduce using rule 44 (term -> term DIVIDE unario .)
    OR              reduce using rule 44 (term -> term DIVIDE unario .)
    RPAREN          reduce using rule 44 (term -> term DIVIDE unario .)


state 96

    (52) factor -> LPAREN exp_bool RPAREN .

    TIMES           reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)
    DIVIDE          reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)
    LT              reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)
    LE              reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)
    GT              reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)
    GE              reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)
    PLUS            reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)
    MINUS           reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)
    EQ              reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)
    NE              reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)
    AND             reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)
    SEMICOLON       reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)
    OR              reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)
    RPAREN          reduce using rule 52 (factor -> LPAREN exp_bool RPAREN .)


state 97

    (20) sent_if -> IF LPAREN exp_bool RPAREN THEN . bloque ELSE bloque FI
    (21) sent_if -> IF LPAREN exp_bool RPAREN THEN . bloque FI
    (26) bloque -> . LBRACE lista_sent RBRACE

    LBRACE          shift and go to state 13

    bloque                         shift and go to state 100

state 98

    (22) sent_while -> WHILE LPAREN exp_bool RPAREN bloque .

    RBRACE          reduce using rule 22 (sent_while -> WHILE LPAREN exp_bool RPAREN bloque .)
    BREAK           reduce using rule 22 (sent_while -> WHILE LPAREN exp_bool RPAREN bloque .)
    IF              reduce using rule 22 (sent_while -> WHILE LPAREN exp_bool RPAREN bloque .)
    WHILE           reduce using rule 22 (sent_while -> WHILE LPAREN exp_bool RPAREN bloque .)
    DO              reduce using rule 22 (sent_while -> WHILE LPAREN exp_bool RPAREN bloque .)
    READ            reduce using rule 22 (sent_while -> WHILE LPAREN exp_bool RPAREN bloque .)
    WRITE           reduce using rule 22 (sent_while -> WHILE LPAREN exp_bool RPAREN bloque .)
    LBRACE          reduce using rule 22 (sent_while -> WHILE LPAREN exp_bool RPAREN bloque .)
    ID              reduce using rule 22 (sent_while -> WHILE LPAREN exp_bool RPAREN bloque .)


state 99

    (23) sent_do -> DO bloque UNTIL LPAREN exp_bool . RPAREN SEMICOLON
    (28) exp_bool -> exp_bool . OR comb

    RPAREN          shift and go to state 101
    OR              shift and go to state 64


state 100

    (20) sent_if -> IF LPAREN exp_bool RPAREN THEN bloque . ELSE bloque FI
    (21) sent_if -> IF LPAREN exp_bool RPAREN THEN bloque . FI

    ELSE            shift and go to state 102
    FI              shift and go to state 103


state 101

    (23) sent_do -> DO bloque UNTIL LPAREN exp_bool RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 104


state 102

    (20) sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE . bloque FI
    (26) bloque -> . LBRACE lista_sent RBRACE

    LBRACE          shift and go to state 13

    bloque                         shift and go to state 105

state 103

    (21) sent_if -> IF LPAREN exp_bool RPAREN THEN bloque FI .

    RBRACE          reduce using rule 21 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque FI .)
    BREAK           reduce using rule 21 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque FI .)
    IF              reduce using rule 21 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque FI .)
    WHILE           reduce using rule 21 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque FI .)
    DO              reduce using rule 21 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque FI .)
    READ            reduce using rule 21 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque FI .)
    WRITE           reduce using rule 21 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque FI .)
    LBRACE          reduce using rule 21 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque FI .)
    ID              reduce using rule 21 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque FI .)


state 104

    (23) sent_do -> DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON .

    RBRACE          reduce using rule 23 (sent_do -> DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON .)
    BREAK           reduce using rule 23 (sent_do -> DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON .)
    IF              reduce using rule 23 (sent_do -> DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON .)
    WHILE           reduce using rule 23 (sent_do -> DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON .)
    DO              reduce using rule 23 (sent_do -> DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON .)
    READ            reduce using rule 23 (sent_do -> DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON .)
    WRITE           reduce using rule 23 (sent_do -> DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON .)
    LBRACE          reduce using rule 23 (sent_do -> DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON .)
    ID              reduce using rule 23 (sent_do -> DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON .)


state 105

    (20) sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque . FI

    FI              shift and go to state 106


state 106

    (20) sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI .

    RBRACE          reduce using rule 20 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI .)
    BREAK           reduce using rule 20 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI .)
    IF              reduce using rule 20 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI .)
    WHILE           reduce using rule 20 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI .)
    DO              reduce using rule 20 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI .)
    READ            reduce using rule 20 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI .)
    WRITE           reduce using rule 20 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI .)
    LBRACE          reduce using rule 20 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI .)
    ID              reduce using rule 20 (sent_if -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI .)

